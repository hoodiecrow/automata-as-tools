
general:

	jmp ← val(a)
	[rp] ← ip + 1
	...
	if jflag
		ip ← jmp
		jflag ← 0
	else
		ip+


receivers:

acc
aux
jflag
jmp
reg(a)
tape/head
[sp]

producers:

0
*,EQ,NE,GT,GE,0,1,Z,NZ/<=>
acc
reg(a)
reg(b)
reg(c)
tape/head
[sp]
val(a)

operations:

cmp (sets <=>)
halt
op (sets <=>)
out
ip+
ip-
rp+
rp-
sp+
sp-
test

expressions:

[sp] ← 0 
[sp] ← acc
[sp] ← val(a)
acc ← [sp]
acc ← reg(a)
acc ← reg(c)
acc ← tape/head
aux ← [sp]
aux ← reg(b)
jflag ← *,EQ,NE,GT,GE,0,1,Z,NZ/<=>
jmp ← [rp]
reg(a) ← 0
reg(a) ← acc
reg(a) ← reg(b)
tape/head ← acc

STA
[sp] ← acc
reg(a) ← acc
tape/head ← acc

LDA
acc ← [sp]
acc ← reg(a)
acc ← tape/head

LDAX
acc ← reg(c), aux ← reg(b)
aux ← [sp], sp-, acc ← [sp]

-- try to get rid of acc/aux
??            tape/head ← acc
??            acc ← tape/head
push imm      sp+, [sp] ← val(a)
push acc      sp+, STA
pop           LDA, sp-
top           LDA
drop          sp-
clr reg       reg(a) ← 0
clr stack     [sp] ← 0 
cpy reg       reg(a) ← reg(b)
dup stack     LDA, sp+, STA
unop          LDA, op, STA
binop         LDAX, op, STA
cmp           LDAX, cmp (sets <=>)
cmp           LDAX, sp+, cmp (sets <=>)
jmp           jflag ← 1
j<cond>       jflag ← EQ,NE,GT,GE,0,1,Z,NZ/<=>
call          jflag ← 1, rp+
ret           jflag ← 1, jmp ← [rp], rp-
