package require tcltest
namespace import ::tcltest::*

::tcltest::configure {*}$argv

::tcltest::loadTestedCommands

package require automata::processor

test processor-1.0 {set acc and check <=>} -body {
    ::automata::Processor create P
    set res [P get <=>]
    P acc: 99
    lappend res [P get acc <=>]
} -cleanup {
    P destroy
    log::lvSuppressLE i 1
} -result {<=> 0 {acc 99 <=> 1}}


test processor-1.1 {set acc and check <=>} -body {
    ::automata::Processor create P
    set res [P get <=>]
    P acc: 0
    lappend res [P get acc <=>]
} -cleanup {
    P destroy
    log::lvSuppressLE i 1
} -result {<=> 0 {acc 0 <=> 0}}


test processor-2.0 {CALL and RET} -body {
    ::automata::Processor create P
    P ipointer: 10
    P exec {CALL 99}
    P step
    P exec {CALL 77}
    P step
    P exec {CALL 55}
    P step
    set res [P get jmp returns ipointer]
} -cleanup {
    P destroy
    log::lvSuppressLE i 1
} -result {jmp {} returns {78 100 11} ipointer 55}


test processor-2.1 {CALL and RET} -body {
    ::automata::Processor create P
    P ipointer: 10
    P exec {CALL 99}
    P step
    P exec {CALL 77}
    P step
    P exec {CALL 55}
    P step
    P exec RET
    P step
    P exec RET
    P step
    set res [P get jmp returns ipointer]
} -cleanup {
    P destroy
    log::lvSuppressLE i 1
} -result {jmp {} returns 11 ipointer 100}


test processor-3.0 {CLR} -body {
    ::automata::Processor create P
    P set model CM registers {0 0 3 0 0}
    P exec {CLR 2}
    set res [P get registers]
    P set model PTM tape {0 0 3 0 0} head 2
    P exec CLR
    lappend res {*}[P get tape]
    P set model SM stack {3 0 0}
    P exec CLR
    lappend res {*}[P get stack]
} -cleanup {
    P destroy
    log::lvSuppressLE i 1
} -result {registers {0 0 0 0 0} tape {0 0 0 0 0} stack {0 0 0}}


test processor-3.1 {ADD} -body {
    ::automata::Processor create P
    P set model CM acc 0 registers {0 0 3 2 0}
    P exec {ADD 1 2 3}
    set res [P get registers]
    P set model SM acc 0 stack {3 2 0}
    P exec ADD
    lappend res {*}[P get stack]
} -cleanup {
    P destroy
    log::lvSuppressLE i 1
} -result {registers {0 5 3 2 0} stack {5 0}}


test processor-3.2 {SUB} -body {
    ::automata::Processor create P
    P set model CM acc 0 registers {0 0 3 2 0}
    P exec {SUB 1 2 3}
    set res [P get registers]
    P set model SM acc 0 stack {3 2 0}
    P exec SUB
    lappend res {*}[P get stack]
} -cleanup {
    P destroy
    log::lvSuppressLE i 1
} -result {registers {0 1 3 2 0} stack {1 0}}


test processor-3.3 {PUSH} -body {
    ::automata::Processor create P
    P set model SM acc 0 stack {0}
    P exec {PUSH 3}
    P acc: 5
    P exec PUSH
    set res [P get stack]
} -cleanup {
    P destroy
    log::lvSuppressLE i 1
} -result {stack {5 3 0}}


test processor-3.4 {INC} -body {
    ::automata::Processor create P
    P set model CM acc 0 registers {0 0 3}
    P exec {INC 2}
    set res [P get registers]
    P set model SM acc 0 stack {0}
    P exec {PUSH 3}
    P exec INC
    lappend res {*}[P get stack]
} -cleanup {
    P destroy
    log::lvSuppressLE i 1
} -result {registers {0 0 4} stack {4 0}}


test processor-3.5 {JEQ} -body {
    ::automata::Processor create P
    P set model CM acc 0 registers {0 0 3 3 2} ipointer 0
    P exec {JEQ 99 2 3}
    set res [P get <=> jmp]
    P set <=> 0 jmp {}
    P exec {JEQ 99 3 4}
    lappend res [P get <=> jmp]
    P set <=> 0 jmp {}
    P set model SM acc 0 stack {0} ipointer 0
    P exec {PUSH 3}
    P exec {PUSH 3}
    P exec {JEQ 99}
    lappend res [P get <=> jmp]
    P set <=> 0 jmp {}
    P exec {PUSH 2}
    P exec {PUSH 3}
    P exec {JEQ 99}
    lappend res [P get <=> jmp]
} -cleanup {
    P destroy
    log::lvSuppressLE i 1
} -result {<=> 0 jmp 99 {<=> -1 jmp {}} {<=> 0 jmp 99} {<=> -1 jmp {}}}


if {[package vcompare [package present automata::processor] 0.4] > 0} { 
    cleanupTests ; return 
} 
 

cleanupTests ; return ; # ---------------------------------
