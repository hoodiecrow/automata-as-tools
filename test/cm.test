package require tcltest
namespace import ::tcltest::*

::tcltest::configure {*}$argv

::tcltest::loadTestedCommands

package require automata::machine

if no {
    set mc CM
    set m [subst {::automata::$mc create M}]
    {*}$m
    M doc [file join ~ code automata-as-tools.wiki class.$mc.md]
    M destroy
}

test cm-1.0 {Implement a CPY operation} -body {
    ::automata::CM create M {
        code {
            a:  JZ:b,2
                DEC:2
                INC:3
                INC:1
                JMP:a
            b:  JZ:z,1
                DEC:1
                INC:2
                JMP:b
            z:  NOP
        }
    }
    M run {0 0 2 0 0}
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{0 0 2 2 0} 10}

test cm-1.1 {print 1.0} -body {
    ::automata::CM create M {
        code {
            a:  JZ:b,2
                DEC:2
                INC:3
                INC:1
                JMP:a
            b:  JZ:z,1
                DEC:1
                INC:2
                JMP:b
            z:  NOP
        }
    }
    M print
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -output {Code
a     JZ    b     2 
      DEC   2      
      INC   3      
      INC   1      
      JMP   a      
b     JZ    z     1 
      DEC   1      
      INC   2      
      JMP   b      
z     NOP          
Instantaneous description: registers, ipointer
}

test cm-2.0 {Implement a DEC operation using instruction set 2} -constraints SKIP -setup {
    ::automata::CM create M -instructionset 2
} -body {
    M compile {
        _:  INC:1
        a:  JE:b,2,3
            INC:3
            JE:a,0,0
        b:  CLR:2
        c:  JE:z,1,3
            INC:1
            INC:2
            JE:c,0,0
        z:  NOP
    }
    # in a real program there would be cleanup
    M run {0 0 2 0}
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{0 2 1 2} 10}

cleanupTests ; return ; # ---------------------------------
