package require tcltest
namespace import ::tcltest::*

::tcltest::configure {*}$argv

::tcltest::testConstraint noskip 1

::tcltest::loadTestedCommands

package require automata::automaton

if no {
    set mc PDA
    set m [subst {::automata::$mc create M}]
    {*}$m
    M doc [file join ~ code automata-as-tools.wiki class.$mc.md]
    M destroy
}

test pda-1.0 {0^n1^n | n >= 0} -setup {
    ::automata::PDA create M {
        tuples {*}{
            {p 0/Z;A,Z p}
            {p 0/A;A,A p}
            {p _/Z;Z  q}
            {p _/A;A  q}
            {q 1/A;_  q}
            {q _/Z;Z  r}
        }
        start p
        final r
        stack Z
    }
} -body {
    M accept {}
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result 1

test pda-1.1 {0^n1^n | n >= 0} -setup {
    ::automata::PDA create M {
        tuples {*}{
            {p 0/Z;A,Z p}
            {p 0/A;A,A p}
            {p _/Z;Z  q}
            {p _/A;A  q}
            {q 1/A;_  q}
            {q _/Z;Z  r}
        }
        start p
        final r
        stack Z
    }
} -body {
    M accept {0 0 0 0 1 1 1 1}
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result 1

test pda-1.2 {} -setup {
    ::automata::PDA create M {
        tuples {*}{
            {p 0/Z;A,Z p}
            {p 0/A;A,A p}
            {p _/Z;Z  q}
            {p _/A;A  q}
            {q 1/A;_  q}
            {q _/Z;Z  r}
        }
        start p
        final r
        stack Z
    }
} -body {
    set res {}
    lappend res [M accept {0 0 0 0 1 1 1 1 1}]
    lappend res [M accept {1 1 0}]
    lappend res [M accept {0 1}]
    lappend res [M accept {0 0 0 1 1 1}]
    set res
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {0 0 1 1}

test pda-1.3 {} -setup {
    ::automata::PDA create M {
        tuples {*}{
            {p 0/Z;A,Z p}
            {p 0/A;A,A p}
            {p _/Z;Z  q}
            {p _/A;A  q}
            {q 1/A;_  q}
            {q _/Z;Z  r}
        }
        start p
        final r
        stack Z
    }
} -body {
    M print
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -output {Input symbols     A = {0, 1}
Output symbols    B = {A, Z}
State symbols     Q = {p, q, r}
Initial stack     Z = Z
Start symbol      S = p
Final symbols     F = {r}
Transitions
p, 0, Z → p
p, 0, A → p
p, ε, Z → q
p, ε, A → q
q, 1, A → q
q, ε, Z → r
Output
p, 0, Z → A,Z
p, 0, A → A,A
p, ε, Z → Z
p, ε, A → A
q, 1, A → ε
q, ε, Z → Z
Instantaneous description: input, state, stack
}

if {[package vcompare [package present automata::automaton] 0.4] > 0} { 
    cleanupTests ; return 
} 
 
cleanupTests ; return
