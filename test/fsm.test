package require tcltest
namespace import ::tcltest::*

::tcltest::configure {*}$argv

::tcltest::testConstraint noskip 1

::tcltest::loadTestedCommands

package require automata::automaton

if no {
    set mc FSM
    set m [subst {::automata::$mc create M}]
    {*}$m
    M doc [file join ~ code automata-as-tools.wiki class.$mc.md]
    M destroy
}

test foo-1.0 {} -body {
    ::automata::FSM create M {
        tuples {*}{ 
            {s1 0 s2}
            {s1 1 s1}
            {s2 0 s1}
            {s2 1 s2}
        }
        start s1
        final s1
    }
    M dump
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{Q A T} {4 3 {{s1 0 s2} {s1 1 s1} {s2 0 s1} {s2 1 s2}}} {T {s1 s2} A {0 1} Q {s1 s2} F s1 S s1} {input state}}

test dfa-1.0 {accept binary numbers that are multiples of 3} -body {
    ::automata::FSM create M {
        tuples {*}{ 
            {s0 0 s0}
            {s0 1 s1}
            {s1 0 s2}
            {s1 1 s0}
            {s2 0 s1}
            {s2 1 s2}
        }
        start s0
        final s0
    }
    set res {}
    lappend res [M accept {1}]
    lappend res [M accept {0 1}]
    lappend res [M accept {1 1}]
    lappend res [M accept {0 0 1}]
    lappend res [M accept {1 0 1}]
    lappend res [M accept {0 1 1}]
    lappend res [M accept {1 1 1}]
    set res
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {0 0 1 0 0 1 0}

test dfa-1.1 {find even number of ones/zeros} -body {
    ::automata::FSM create M {
        tuples {*}{ 
            {s1 0 s2}
            {s1 1 s1}
            {s2 0 s1}
            {s2 1 s2}
        }
        start s1
        final s1
    }
    set res {}
    lappend res [M accept {1 1}]
    lappend res [M accept {1 0}]
    lappend res [M accept {0 1}]
    lappend res [M accept {0 0}]
    lappend res [M accept {1 0 0 1 1 1}]
    lappend res [M accept {1 0 0 1 1 0}]
    set res
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {1 0 0 1 1 0}

test dfa-1.2 {find even number of ones/zeros: print the machine} -body {
    ::automata::FSM create M {
        tuples {*}{ 
            {s1 0 s2}
            {s1 1 s1}
            {s2 0 s1}
            {s2 1 s2}
        }
        start s1
        final s1
    }
    M print
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -output {Input symbols     A = {0, 1}
State symbols     Q = {s1, s2}
Start symbols     S = {s1}
Final symbols     F = {s1}
Transitions
s1, 0 → s2
s1, 1 → s1
s2, 0 → s1
s2, 1 → s2
Instantaneous description: input, state
}

test nfa-1.0 {} -body {
    ::automata::FSM create M {
        tuples {*}{ 
            {s0 0 s0}
            {s0 1 s0}
            {s0 1 s1}
            {s1 0 s0}
            {s1 1 s1}
    }
        start s0
        final s1
    }
    set res {}
    lappend res [M accept {1}]
    lappend res [M accept {0}]
    lappend res [M accept {1 1}]
    lappend res [M accept {1 0}]
    lappend res [M accept {0 1}]
    lappend res [M accept {0 0}]
    set res
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {1 0 1 0 1 0}

test nfa-1.1 {find even number of ones/zeros} -body {
    ::automata::FSM create M {
        tuples {*}{ 
            {s0 _ s1}
            {s0 _ s3}
            {s1 0 s2}
            {s1 1 s1}
            {s2 0 s1}
            {s2 1 s2}
            {s3 0 s3}
            {s3 1 s4}
            {s4 0 s4}
            {s4 1 s3}
        }
        start s0
        final s1 s3
    }
    set res {}
    lappend res [M accept {1 1}]
    lappend res [M accept {1 0}]
    lappend res [M accept {0 1}]
    lappend res [M accept {0 0}]
    lappend res [M accept {1 0 0 1 1 1}]
    lappend res [M accept {1 0 0 1 1 0}]
    set res
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {1 0 0 1 1 0}

test nfa-1.2 {find even number of ones/zeros: fail} -body {
    ::automata::FSM create M {
        options -epsilon 0
        tuples {*}{ 
            {s0 _ s1}
            {s0 _ s3}
            {s1 0 s2}
            {s1 1 s1}
            {s2 0 s1}
            {s2 1 s2}
            {s3 0 s3}
            {s3 1 s4}
            {s4 0 s4}
            {s4 1 s3}
        }
        start s0
        final s1 s3
    }
} -cleanup {
    log::lvSuppressLE i 1
} -result {machine not configured for epsilon moves} -returnCodes error

cleanupTests ; return ; # ---------------------------------
