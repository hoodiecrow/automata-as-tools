package require tcltest
namespace import ::tcltest::*

::tcltest::configure {*}$argv

::tcltest::loadTestedCommands

package require automata::machine

if no {
    set mc KTR
    set m [subst {::automata::$mc create M}]
    {*}$m
    M doc [file join ~ code automata-as-tools.wiki class.$mc.md]
    M destroy
}

test ktr-1.0 {} -body {
    ::automata::KTR create M {
        code {
            a:          TEST:next-to-a-beeper
                        J1:end
                        TEST:right-is-clear
                        J0:b
                        CALL:turnright
                        JMP:c
            b:          TEST:front-is-clear
                        J1:c
                        OUT:robot,TURN
                        JMP:b
            c:          OUT:robot,MOVE
                        JMP:a
            end:        HALT
            turnright:  OUT:robot,TURN OUT:robot,TURN OUT:robot,TURN RET
        }
    }
    M run {3 3 {3 2} {2 1 2 2}} {1 1 0 e}
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{3 3 {3 2} {2 1 2 2}} {3 2 0 s} {} 0 12}

test ktr-1.1 {print 1.0} -body {
    ::automata::KTR create M {
        code {
            a:          TEST:next-to-a-beeper
                        JNZ:end,0
                        TEST:right-is-clear
                        JZ:b,0
                        CALL:turnright
                        JMP:c
            b:          TEST:front-is-clear
                        JNZ:c,0
                        OUT:robot,TURN
                        JMP:b
            c:          OUT:robot,MOVE
                        JMP:a
            end:        HALT
            turnright:  OUT:robot,TURN OUT:robot,TURN OUT:robot,TURN RET
        }
    }
    M print
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -output {Code
a           TEST  next  to a
            JNZ   end   0 
            TEST  right is clear
            JZ    b     0 
            CALL  turnright 
            JMP   c      
b           TEST  front is clear
            JNZ   c     0 
            OUT   robot TURN 
            JMP   b      
c           OUT   robot MOVE 
            JMP   a      
end         HALT         
turnright   OUT   robot TURN 
            OUT   robot TURN 
            OUT   robot TURN 
            RET          
Instantaneous description: world, robot, returns, zflag, ipointer
}

if {[package vcompare [package present automata::machine] 0.4] > 0} { 
    cleanupTests ; return 
} 
 

cleanupTests ; return ; # ---------------------------------
