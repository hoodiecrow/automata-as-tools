package require tcltest
namespace import ::tcltest::*

::tcltest::configure {*}$argv

::tcltest::loadTestedCommands

package require automata::codemachine

set mc KTR
set m [subst {::automata::$mc create M}]
{*}$m
M doc [file join ~ code automata-as-tools.wiki class.$mc.md]
M destroy

test ktr-1.0 {} -setup {
    ::automata::KTR create M
} -body {
    M compile {
        a:          TEST:next-to-a-beeper
                    JT:end
                    TEST:right-is-clear
                    JNT:b
                    CALL:turnright
                    J:c
        b:          TEST:front-is-clear
                    JT:c
                    TURN
                    J:b
        c:          MOVE
                    J:a
        end:        HALT
        turnright:  TURN TURN TURN RET
    }
    M run {3 3} {1 1 0 0} {3 2} {2 1 2 2}
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{3 3} {3 2 0 3} {} 0 {3 2} {2 1 2 2} 12}

test ktr-1.1 {print 1.0} -setup {
    ::automata::KTR create M
} -body {
    M compile {
        a:          TEST:next-to-a-beeper
                    JT:end
                    TEST:right-is-clear
                    JNT:b
                    CALL:turnright
                    J:c
        b:          TEST:front-is-clear
                    JT:c
                    TURN
                    J:b
        c:          MOVE
                    J:a
        end:        HALT
        turnright:  TURN TURN TURN RET
    }
    M print
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -output {Flag symbols    A = {0, 1}
Instructions    Q = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}
Program start   S = 0
Program end     F = {17}
Transitions
q0    inp   q1    out
0     0     1     {TEST: 3}
0     1     1     {TEST: 3}
1     0     2     NOP
1     1     12    NOP
2     0     3     {TEST: 2}
2     1     3     {TEST: 2}
3     0     6     NOP
3     1     4     NOP
4     0     13    CALL:
4     1     13    CALL:
5     0     10    NOP
5     1     10    NOP
6     0     7     {TEST: 0}
6     1     7     {TEST: 0}
7     0     8     NOP
7     1     10    NOP
8     0     9     TURN
8     1     9     TURN
9     0     6     NOP
9     1     6     NOP
10    0     11    MOVE
10    1     11    MOVE
11    0     0     NOP
11    1     0     NOP
12    0     13    HALT
12    1     13    HALT
13    0     14    TURN
13    1     14    TURN
14    0     15    TURN
14    1     15    TURN
15    0     16    TURN
15    1     16    TURN
16    0     17    RET
16    1     17    RET
}

cleanupTests ; return ; # ---------------------------------
