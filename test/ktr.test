package require tcltest
namespace import ::tcltest::*

::tcltest::configure {*}$argv

::tcltest::loadTestedCommands

package require automata::ktr

set mc KTR
set m [subst {::automata::$mc create M}]
{*}$m
M doc [file join ~ code automata-as-tools.wiki class.$mc.md]
M destroy

test ktr-1.0 {} -setup {
    ::automata::KTR create M
} -body {
    M compile {
        a:          TEST:next-to-a-beeper
                    JT:end
                    TEST:right-is-clear
                    JNT:b
                    CALL:turnright
                    J:c
        b:          TEST:front-is-clear
                    JT:c
                    TURN
                    J:b
        c:          MOVE
                    J:a
        end:        HALT
        turnright:  TURN TURN TURN RET
    }
    M run {3 3} {1 1 0 0} {3 2} {2 1 2 2}
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{3 3} {3 2 0 3} 13 0 {3 2} {2 1 2 2}}

test ktr-1.1 {print 1.0} -setup {
    ::automata::KTR create M
} -body {
    M compile {
        a:          TEST:next-to-a-beeper
                    JT:end
                    TEST:right-is-clear
                    JNT:b
                    CALL:turnright
                    J:c
        b:          TEST:front-is-clear
                    JT:c
                    TURN
                    J:b
        c:          MOVE
                    J:a
        end:        HALT
        turnright:  TURN TURN TURN RET
    }
    M print
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -output {Flag symbols    A = {0, 1}
Instructions    Q = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}
Program start   S = 1
Program end     F = {18}
Transitions
q0    inp   q1    out
1     0     2     {TEST: 3}
1     1     2     {TEST: 3}
2     0     3     NOP
2     1     13    NOP
3     0     4     {TEST: 2}
3     1     4     {TEST: 2}
4     0     7     NOP
4     1     5     NOP
5     0     14    CALL:
5     1     14    CALL:
6     0     11    NOP
6     1     11    NOP
7     0     8     {TEST: 0}
7     1     8     {TEST: 0}
8     0     9     NOP
8     1     11    NOP
9     0     10    TURN
9     1     10    TURN
10    0     7     NOP
10    1     7     NOP
11    0     12    MOVE
11    1     12    MOVE
12    0     1     NOP
12    1     1     NOP
13    0     14    HALT
13    1     14    HALT
14    0     15    TURN
14    1     15    TURN
15    0     16    TURN
15    1     16    TURN
16    0     17    TURN
16    1     17    TURN
17    0     18    RET
17    1     18    RET
}

cleanupTests ; return ; # ---------------------------------
