package require tcltest
namespace import ::tcltest::*

::tcltest::configure {*}$argv

::tcltest::loadTestedCommands

package require automata::ktr

test ktr-1.0 {} -setup {
    ::automata::KTR create M
} -body {
    M compile {
        a:          TEST:next-to-a-beeper
                    JUMPZ:end
                    TEST:right-is-blocked
                    JUMPZ:b
                    GOSUB:turnright
                    JUMP:c
        b:          TEST:front-is-clear
                    JUMPZ:c
                    turnleft
                    JUMP:b
        c:          move
                    JUMP:a
        end:        turnoff
        turnright:  turnleft turnleft turnleft RET
    }
    M run {3 3} {1 1 0 0} {3 2} {2 1 2 2}
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{3 3} {3 2 0 3} 2 1 {3 2} {2 1 2 2}}

test ktr-1.1 {print 1.0} -setup {
    ::automata::KTR create M
} -body {
    M compile {
        a:          TEST:next-to-a-beeper
                    JUMPZ:end
                    TEST:right-is-blocked
                    JUMPZ:b
                    GOSUB:turnright
                    JUMP:c
        b:          TEST:front-is-clear
                    JUMPZ:c
                    turnleft
                    JUMP:b
        c:          move
                    JUMP:a
        end:        turnoff
        turnright:  turnleft turnleft turnleft RET
    }
    M print
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -output {Flag symbols    A = {0, 1}
Facing          C = {0, 1, 2, 3}
Instructions    Q = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}
Program start   S = 1
Program end     F = {13, 18}
Operator list   O = {DROP, GOSUB, JUMP, JUMPZ, MOVE, NOP, RET, TAKE, TEST, TURN}
Test numbers    T = {}
Transitions
q0    inp   q1    out
1     0     2     TEST 7
1     1     2     TEST 7
2     0     3     NOP 0
2     1     13    NOP 0
3     0     4     TEST 6
3     1     4     TEST 6
4     0     5     NOP 0
4     1     7     NOP 0
5     0     14    GOSUB 0
5     1     14    GOSUB 0
6     0     11    NOP 0
6     1     11    NOP 0
7     0     8     TEST 1
7     1     8     TEST 1
8     0     9     NOP 0
8     1     11    NOP 0
9     0     10    TURN 0
9     1     10    TURN 0
10    0     7     NOP 0
10    1     7     NOP 0
11    0     12    MOVE 0
11    1     12    MOVE 0
12    0     1     NOP 0
12    1     1     NOP 0
13    0     14    NOP 0
13    1     14    NOP 0
14    0     15    TURN 0
14    1     15    TURN 0
15    0     16    TURN 0
15    1     16    TURN 0
16    0     17    TURN 0
16    1     17    TURN 0
17    0     18    RET 0
17    1     18    RET 0
}

cleanupTests ; return ; # ---------------------------------
