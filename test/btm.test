package require tcltest
namespace import ::tcltest::*

::tcltest::configure {*}$argv

::tcltest::loadTestedCommands

package require automata::automaton

if no {
    set mc BTM
    set m [subst {::automata::$mc create M}]
    {*}$m
    M doc [file join ~ code automata-as-tools.wiki class.$mc.md]
    M destroy
}

test btm-1.0 {3 state, 2 symbol busy beaver} -setup {} -body {
    ::automata::BTM create M {
        tuples {*}{
            {A 0/P;R B}
            {A 1/P;L C}
            {B 0/P;L A}
            {B 1/P;R B}
            {C 0/P;L B}
            {C 1/P;R H}
        }
        start A
        final H
    }
    M run {0}
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{{1 1 1 1 1 1 0} 1 H}}

test btm-1.1 {3 state, 2 symbol busy beaver print} -constraints PRINT -body {
    ::automata::BTM create M {
        tuples {*}{
            {A 0/P;R B}
            {A 1/P;L C}
            {B 0/P;L A}
            {B 1/P;R B}
            {C 0/P;L B}
            {C 1/P;R H}
        }
        start A
        final H
    }
    M print
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -output {Tape symbols      A = {0, 1}
Print symbols     B = {E, P, N}
Move symbols      C = {L, R, N}
State symbols     Q = {A, B, C, H}
Start symbol      S = A
Final symbols     F = {H}
Head position     I = {0}
Transitions
q0    inp   q1    out
A     0     B     P R
A     1     C     P L
B     0     A     P L
B     1     B     P R
C     0     B     P L
C     1     H     P R
Instantaneous description
tape contents          tape: A*
current index          head: I
current state          state: Q
}

test btm-1.3 {4 state, 2 symbol busy beaver} -setup {} -body {
    ::automata::BTM create M {
        tuples {*}{
            {A 0/P;R B}
            {A 1/P;L B}
            {B 0/P;L A}
            {B 1/E;L C}
            {C 0/P;R H}
            {C 1/P;L D}
            {D 0/P;R D}
            {D 1/E;R A}
        }
        start A
        final H
    }
    M run {0}
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{{1 1 1 1 1 1 1 1 1 1 1 1 0 1 0} 12 H}}

if {[package vcompare [package present automata::automaton] 0.4] > 0} { 
    cleanupTests ; return 
} 
 

cleanupTests ; return ; # ---------------------------------
