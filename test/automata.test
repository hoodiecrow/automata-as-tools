package require tcltest
namespace import ::tcltest::*

::tcltest::configure {*}$argv

::tcltest::testConstraint noskip 1

::tcltest::loadTestedCommands

if {[package vcompare [package present automata] 2.3] > 0} { 
    cleanupTests ; return 
} 
 
# http://cs.union.edu/~striegnk/courses/nlp-with-prolog/html/node13.html

    # this isn't non-det
    set Tlex {
        0 "d NOUN" 1
        0 "f NOUN" 2
        0 "g NOUN" 3
        0 "m NOUN" 4
        1 "o sg" 14
        2 "i sg" 12
        3 "o sg" 10
        3 "e pl" 11
        4 "o sg" 6
        4 "i pl" 5
        5 "c ε" 8
        6 "u ε" 7
        7 "s ε" 8
        8 "e ε" 9
        10 "o ε" 7
        11 "e ε" 7
        12 "s ε" 13
        13 "h ε" 9
        14 "g ε" 9
        15 "g ε" 16
        16 "s ε" 9
    }

test nfst-1.0 {} -setup $m -body {
    FSM create M {s 0 A {9}} $Tlex
    M translate [split dog {}]
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{NOUN sg}}

test nfst-1.1 {} -setup $m -body {
    FSM create M {s 0 A {9}} $Tlex
    set res {}
    lappend res [lsort [M translate [split fish {}]]]
    lappend res [lsort [M translate [split geese {}]]]
    lappend res [lsort [M translate [split mouse {}]]]
    lappend res [lsort [M translate [split mice {}]]]
    set res
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{{NOUN sg}} {{NOUN pl}} {{NOUN sg}} {{NOUN pl}}}

# http://web.cs.ucdavis.edu/~rogaway/classes/120/spring13/eric-transducers.pdf


cleanupTests ; return ; # ---------------------------------




test tm-1.1 {4 state, 2 symbol busy beaver} -setup $m -body {
    DTM create M {
        I {0 1}
        S {A B C D HALT}
        T {0 1}
        s A
        H {HALT}
        b 0
        t {
            {A 0} B
            {A 1} B
            {B 0} A
            {B 1} C
            {C 0} HALT
            {C 1} D
            {D 0} D
            {D 1} A
        }
        o {
            {A 0} {1 R}
            {A 1} {1 L}
            {B 0} {1 L}
            {B 1} {0 L}
            {C 0} {1 R}
            {C 1} {1 L}
            {D 0} {1 R}
            {D 1} {0 R}
        }
    }
    M run
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0}

test tm-1.2 {4 state, 2 symbol busy beaver} -setup $m -body {
    DTM create M {
        I {0 1}
        S {A B C D HALT}
        T {0 1}
        s A
        H {HALT}
        b 0
        t {
            {A 0} B
            {A 1} B
            {B 0} A
            {B 1} C
            {C 0} HALT
            {C 1} D
            {D 0} D
            {D 1} A
        }
        o {
            {A 0} {1 R}
            {A 1} {1 L}
            {B 0} {1 L}
            {B 1} {0 L}
            {C 0} {1 R}
            {C 1} {1 L}
            {D 0} {1 R}
            {D 1} {0 R}
        }
    }
    tuple2json [M tuple]
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{
    "I" : ["0","1"],
    "S" : ["A","B","C","D","HALT"],
    "T" : ["0","1"],
    "s" : "A",
    "H" : ["HALT"],
    "b" : "0",
    "t" : {
        "A 0" : ["B"],
        "A 1" : ["B"],
        "B 0" : ["A"],
        "B 1" : ["C"],
        "C 0" : ["HALT"],
        "C 1" : ["D"],
        "D 0" : ["D"],
        "D 1" : ["A"]
    },
    "o" : {
        "A 0" : ["1","R"],
        "A 1" : ["1","L"],
        "B 0" : ["1","L"],
        "B 1" : ["0","L"],
        "C 0" : ["1","R"],
        "C 1" : ["1","L"],
        "D 0" : ["1","R"],
        "D 1" : ["0","R"]
    }
}}

# 2-state, 2-symbol busy beaver as a Post-Turing machine
#
test ptbb-1.0 {} -setup $m -body {
    PTM create M {
        C {
            begin:  J1:a
                    P R J:b
            a:      P L J:b
            b:      J1:c
                    P L J:begin
            c:      P H
        }
        b " "
        m |
        H {H}
    }
    join [M run] {}
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {||||}

# 2-state, 2-symbol busy beaver as a Post-Turing machine, with cleanup
#
test ptbb-1.1 {} -setup $m -body {
    PTM create M {
        C {
            begin:  J1:a
                    P R J:b
            a:      P L J:b
            b:      J1:c
                    P L J:begin
            c:      L
            d:      J0:done
                    E R J1:d
            done:   H
        }
        b { }
        m |
        H {H}
    }
    join [M run] {}
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {     }

# Post-Turing machine to multiply two values
#
test ptbb-1.2 {} -setup $m -body {
    PTM create M {
        C {
            R J1:*-1 R J1:*-1 R P
            L
   a_loop:  L J1:*-1 L J1:*-1 R
            E
            R J0:done
            R J1:*-1 R
   b_loop:  R
            J0:a_loop
            E
            R J1:*-1 R J1:*-1
            P
            L J1:*-1 L J1:*-1 P
            J1:b_loop
            R
            J0:a_loop
            E
   done:    H
        }
        b { }
        m |
        H {H}
    } [split { |||| |||||  } {}] 0
    join [M run] {}
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {      ||||| |||||||||||||}

# 2-state, 2-symbol busy beaver as a Post-Turing machine
#
test ptbb-1.3 {} -setup $m -body {
    PTM create M {
        C {
            begin:  J1:a
                    P R J:b
            a:      P L J:b
            b:      J1:c
                    P L J:begin
            c:      P H
        }
        b { }
        m |
        H {H}
    }
    tuple2json [M tuple]
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{
    "C" : ["J1","6","P","R","J","10","P","L","J","10","J1","16","P","L","J","0","P","H"],
    "b" : " ",
    "m" : "|",
    "H" : ["H"]
}}





cleanupTests ; return ; # ---------------------------------
