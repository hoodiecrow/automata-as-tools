package require tcltest
namespace import ::tcltest::*

::tcltest::configure {*}$argv

::tcltest::testConstraint noskip 1

::tcltest::loadTestedCommands

set m {::automata::FSM create M}

test fsm-1.0 {} -setup $m -body {
    M next 0 a --> 1 a
    M next 1 b --> 0 b
    M start add 0
    M generate 4
} -cleanup {
    log::lvSuppressLE i 1
    M destroy
} -result {{{a b a b} 0 {a b a b}}}

test fsm-1.1 {} -setup $m -body {
    M next 0 a --> 1 a
    M next 1 b --> 2 b
    M next 2 ε --> 0 c
    M start add 0
    M generate 6
} -cleanup {
    log::lvSuppressLE i 1
    M destroy
} -result {{{a b a b} 0 {a b c a b c}}}

test fsm-1.2 {} -setup $m -body {
    M next 0 a --> 1 a
    M next 0 b --> 2 d
    M next 1 b --> 2 b
    M next 2 ε --> 0 c
    M start add 0
    M generate 6
} -cleanup {
    log::lvSuppressLE i 1
    M destroy
} -result {{{a b a b} 0 {a b c a b c}} {{a b b a} 1 {a b c d c a}} {{a b b b} 2 {a b c d c d}} {{b a b a} 1 {d c a b c a}} {{b a b b} 2 {d c a b c d}} {{b b a b} 2 {d c d c a b}} {{b b b} 0 {d c d c d c}}}

test fsm-2.0 {} -setup $m -body {
    M next 0 a --> 1 a
    M next 1 b --> 0 b
    M start add 0
    M final add 0
    set res {}
    lappend res [M recognize {a b a b} {a b a b}]
    lappend res [M recognize {a b a b} {a b a c}]
    set res
} -cleanup {
    log::lvSuppressLE i 1
    M destroy
} -result {1 0}

test fsm-2.1 {} -setup $m -body {
    M next 0 a --> 1 a
    M next 1 b --> 2 b
    M next 2 ε --> 0 c
    M start add 0
    M final add 0
    set res {}
    lappend res [M recognize {a b a b} {a b c a b c}]
    lappend res [M recognize {a b a b} {a b a b c}]
    set res
} -cleanup {
    log::lvSuppressLE i 1
    M destroy
} -result {1 0}

test dfa-1.0 {accept binary numbers that are multiples of 3} -setup $m -body {
    M next s0 0 --> s0
    M next s0 1 --> s1
    M next s1 0 --> s2
    M next s1 1 --> s0
    M next s2 0 --> s1
    M next s2 1 --> s2
    M start add s0
    M final add s0
    set res {}
    lappend res [M accept {1}]
    lappend res [M accept {0 1}]
    lappend res [M accept {1 1}]
    lappend res [M accept {0 0 1}]
    lappend res [M accept {1 0 1}]
    lappend res [M accept {0 1 1}]
    lappend res [M accept {1 1 1}]
    set res
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {0 0 1 0 0 1 0}

test nfa-1.0 {} -setup $m -body {
    M next s0 0 --> s0
    M next s0 1 --> s0
    M next s0 1 --> s1
    M next s1 0 --> s0
    M next s1 1 --> s1
    M start add s0
    M final add s1
    set res {}
    lappend res [M accept {1}]
    lappend res [M accept {0}]
    lappend res [M accept {1 1}]
    lappend res [M accept {1 0}]
    lappend res [M accept {0 1}]
    lappend res [M accept {0 0}]
    set res
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {1 0 1 0 1 0}

test nfa-1.1 {find even number of ones/zeros} -setup $m -body {
    M next s0 ε --> s1
    M next s0 ε --> s3
    M next s1 0 --> s2
    M next s1 1 --> s1
    M next s2 0 --> s1
    M next s2 1 --> s2
    M next s3 0 --> s3
    M next s3 1 --> s4
    M next s4 0 --> s4
    M next s4 1 --> s3
    M start add s0
    M final add s1
    M final add s3
    set res {}
    lappend res [M accept {1 1}]
    lappend res [M accept {1 0}]
    lappend res [M accept {0 1}]
    lappend res [M accept {0 0}]
    lappend res [M accept {1 0 0 1 1 1}]
    lappend res [M accept {1 0 0 1 1 0}]
    set res
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {1 0 0 1 1 0}

test generate-1.0 {} -setup $m -body {
    M next 1 a --> 2 a
    M next 2 ε --> 1 a
    M start add 1
    M generate 4
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{{a a} 1 {a a a a}}}

test generate-1.1 {} -setup $m -body {
    M next 1 ε --> 2
    M next 1 a --> 3 a
    M next 2 a --> 3 b
    M next 3 ε --> 1 a
    M start add 1
    lsort [M generate 4]
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{a 2 {b a}} {{a a} 1 {a a a a}} {{a a} 3 {a a b}} {{a a} 3 {b a a}}}

test recognize-1.0 {recognize relation {a b} -> {x y}} -setup $m -body {
    M next 1 a --> 1 x
    M next 1 b --> 2 y
    M next 2 ε --> 1
    M start add 1
    M final add 1
    M recognize {a a} {x x}
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result 1

test recognize-1.1 {recognize relation {a b} -> {x (y y)}} -setup $m -body {
    M next 1 a --> 1 x
    M next 1 b --> 2 y
    M next 2 ε --> 1 y
    M start add 1
    M final add 1
    set res {}
    lappend res [M recognize {a b a} {x y y x}]
    lappend res [M recognize {b a a b} {y y x x y}]
    lappend res [M recognize {a b a b} {x y y x y y}]
    set res
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {1 0 1}

test recognize-1.2 {recognize {a*(b+c+)?} relation {a b c} -> {x y z}} -setup $m -body {
    M next 1 a --> 1 x
    M next 1 b --> 2 y
    M next 2 b --> 2 y
    M next 2 c --> 3 z
    M next 3 c --> 3 z
    M next 3 ε --> 1
    M start add 1
    M final add 1
    set res {}
    lappend res [M recognize {a b c} {x y z}]
    lappend res [M recognize {a c b} {x z x}]
    lappend res [M recognize {a b b c c a b c} {x y y z z x y z}]
    lappend res [M recognize {a b c} {x x x}]
    set res
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {1 0 1 0}

test dfst-1.0 {} -setup $m -body {
    M next 1 a --> 2 a
    M next 2 ε --> 1 a
    M start add 1
    M generate 4
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{{a a} 1 {a a a a}}}


test dfst-1.1 {} -setup $m -body {
    M next 1 a --> 2 a
    M next 2 ε --> 1 a
    M start add 1
    M final add 1
    M recognize {a a} {a a a a}
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result 1


test dfst-1.2 {} -setup $m -body {
    M next 1 a --> 2 a
    M next 2 ε --> 1 a
    M start add 1
    M final add 1
    M translate {a a}
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{a a a a}}


test dfst-1.3 {} -setup $m -body {
    M next 1 a --> 2 a
    M next 2 ε --> 1 a
    M start add 1
    M final add 1
    M reconstruct {a a a a}
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{a a}}

test dfst-2.0 {The output becomes 1 and remains 1 thereafter when at least two 0's and two 1's have occurred as inputs} -setup $m -body {
    M next A 0 --> D 0
    M next A 1 --> B 0
    M next B 0 --> E 0
    M next B 1 --> C 0
    M next C 0 --> F 0
    M next C 1 --> C 0
    M next D 0 --> G 0
    M next D 1 --> E 0
    M next E 0 --> H 0
    M next E 1 --> F 0
    M next F 0 --> I 0
    M next F 1 --> F 0
    M next G 0 --> G 0
    M next G 1 --> H 0
    M next H 0 --> H 0
    M next H 1 --> I 0
    M next I 0 --> I 1
    M next I 1 --> I 1
    M start add A
    set res {}
    lappend res [M translate {1 1}]
    lappend res [M translate {1 1 0 0}]
    lappend res [M translate {1 1 0 0 1 0 1 1}]
    set res
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{{0 0}} {{0 0 0 0}} {{0 0 0 0 1 1 1 1}}}

test dfst-2.1 {edge detector} -setup $m -body {
    M next si 0 --> s0 0
    M next si 1 --> s1 0
    M next s0 0 --> s0 0
    M next s0 1 --> s1 1
    M next s1 0 --> s0 1
    M next s1 1 --> s1 0
    M start add si
    M final add s0
    M final add s1
    set res {}
    lappend res [M translate {1 1 0}]
    lappend res [M translate {0 0 1}]
    lappend res [M translate {1 1 0 0 1 0 1 1}]
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{{0 0 1}} {{0 0 1}} {{0 0 1 0 1 1 1 0}}}

if {[package vcompare [package present automata] 2.3] > 0} { 
    cleanupTests ; return 
} 
 
# http://cs.union.edu/~striegnk/courses/nlp-with-prolog/html/node13.html

    # this isn't non-det
    set Tlex {
        0 "d NOUN" 1
        0 "f NOUN" 2
        0 "g NOUN" 3
        0 "m NOUN" 4
        1 "o sg" 14
        2 "i sg" 12
        3 "o sg" 10
        3 "e pl" 11
        4 "o sg" 6
        4 "i pl" 5
        5 "c ε" 8
        6 "u ε" 7
        7 "s ε" 8
        8 "e ε" 9
        10 "o ε" 7
        11 "e ε" 7
        12 "s ε" 13
        13 "h ε" 9
        14 "g ε" 9
        15 "g ε" 16
        16 "s ε" 9
    }

test nfst-1.0 {} -setup $m -body {
    FSM create M {s 0 A {9}} $Tlex
    M translate [split dog {}]
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{NOUN sg}}

test nfst-1.1 {} -setup $m -body {
    FSM create M {s 0 A {9}} $Tlex
    set res {}
    lappend res [lsort [M translate [split fish {}]]]
    lappend res [lsort [M translate [split geese {}]]]
    lappend res [lsort [M translate [split mouse {}]]]
    lappend res [lsort [M translate [split mice {}]]]
    set res
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{{NOUN sg}} {{NOUN pl}} {{NOUN sg}} {{NOUN pl}}}

# http://web.cs.ucdavis.edu/~rogaway/classes/120/spring13/eric-transducers.pdf


cleanupTests ; return ; # ---------------------------------




test tm-1.0 {3 state, 2 symbol busy beaver} -setup $m -body {
    DTM create M {
        I {0 1}
        S {A B C HALT}
        T {0 1}
        s A
        H {HALT}
        b 0
        t {
            {A 0} B
            {A 1} C
            {B 0} A
            {B 1} B
            {C 0} B
            {C 1} HALT
        }
        o {
            {A 0} {1 R}
            {A 1} {1 L}
            {B 0} {1 L}
            {B 1} {1 R}
            {C 0} {1 L}
            {C 1} {1 R}
        }
    }
    M run
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {0 0 0 0 0 1 1 1 1 1 1 0 0 0}

test tm-1.1 {4 state, 2 symbol busy beaver} -setup $m -body {
    DTM create M {
        I {0 1}
        S {A B C D HALT}
        T {0 1}
        s A
        H {HALT}
        b 0
        t {
            {A 0} B
            {A 1} B
            {B 0} A
            {B 1} C
            {C 0} HALT
            {C 1} D
            {D 0} D
            {D 1} A
        }
        o {
            {A 0} {1 R}
            {A 1} {1 L}
            {B 0} {1 L}
            {B 1} {0 L}
            {C 0} {1 R}
            {C 1} {1 L}
            {D 0} {1 R}
            {D 1} {0 R}
        }
    }
    M run
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0}

test tm-1.2 {4 state, 2 symbol busy beaver} -setup $m -body {
    DTM create M {
        I {0 1}
        S {A B C D HALT}
        T {0 1}
        s A
        H {HALT}
        b 0
        t {
            {A 0} B
            {A 1} B
            {B 0} A
            {B 1} C
            {C 0} HALT
            {C 1} D
            {D 0} D
            {D 1} A
        }
        o {
            {A 0} {1 R}
            {A 1} {1 L}
            {B 0} {1 L}
            {B 1} {0 L}
            {C 0} {1 R}
            {C 1} {1 L}
            {D 0} {1 R}
            {D 1} {0 R}
        }
    }
    tuple2json [M tuple]
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{
    "I" : ["0","1"],
    "S" : ["A","B","C","D","HALT"],
    "T" : ["0","1"],
    "s" : "A",
    "H" : ["HALT"],
    "b" : "0",
    "t" : {
        "A 0" : ["B"],
        "A 1" : ["B"],
        "B 0" : ["A"],
        "B 1" : ["C"],
        "C 0" : ["HALT"],
        "C 1" : ["D"],
        "D 0" : ["D"],
        "D 1" : ["A"]
    },
    "o" : {
        "A 0" : ["1","R"],
        "A 1" : ["1","L"],
        "B 0" : ["1","L"],
        "B 1" : ["0","L"],
        "C 0" : ["1","R"],
        "C 1" : ["1","L"],
        "D 0" : ["1","R"],
        "D 1" : ["0","R"]
    }
}}

# 2-state, 2-symbol busy beaver as a Post-Turing machine
#
test ptbb-1.0 {} -setup $m -body {
    PTM create M {
        C {
            begin:  J1:a
                    P R J:b
            a:      P L J:b
            b:      J1:c
                    P L J:begin
            c:      P H
        }
        b " "
        m |
        H {H}
    }
    join [M run] {}
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {||||}

# 2-state, 2-symbol busy beaver as a Post-Turing machine, with cleanup
#
test ptbb-1.1 {} -setup $m -body {
    PTM create M {
        C {
            begin:  J1:a
                    P R J:b
            a:      P L J:b
            b:      J1:c
                    P L J:begin
            c:      L
            d:      J0:done
                    E R J1:d
            done:   H
        }
        b { }
        m |
        H {H}
    }
    join [M run] {}
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {     }

# Post-Turing machine to multiply two values
#
test ptbb-1.2 {} -setup $m -body {
    PTM create M {
        C {
            R J1:*-1 R J1:*-1 R P
            L
   a_loop:  L J1:*-1 L J1:*-1 R
            E
            R J0:done
            R J1:*-1 R
   b_loop:  R
            J0:a_loop
            E
            R J1:*-1 R J1:*-1
            P
            L J1:*-1 L J1:*-1 P
            J1:b_loop
            R
            J0:a_loop
            E
   done:    H
        }
        b { }
        m |
        H {H}
    } [split { |||| |||||  } {}] 0
    join [M run] {}
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {      ||||| |||||||||||||}

# 2-state, 2-symbol busy beaver as a Post-Turing machine
#
test ptbb-1.3 {} -setup $m -body {
    PTM create M {
        C {
            begin:  J1:a
                    P R J:b
            a:      P L J:b
            b:      J1:c
                    P L J:begin
            c:      P H
        }
        b { }
        m |
        H {H}
    }
    tuple2json [M tuple]
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{
    "C" : ["J1","6","P","R","J","10","P","L","J","10","J1","16","P","L","J","0","P","H"],
    "b" : " ",
    "m" : "|",
    "H" : ["H"]
}}





cleanupTests ; return ; # ---------------------------------
