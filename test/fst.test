package require tcltest
namespace import ::tcltest::*

::tcltest::configure {*}$argv

::tcltest::loadTestedCommands

package require automata::automaton

if no {
    set mc FST
    set m [subst {::automata::$mc create M}]
    {*}$m
    M doc [file join ~ code automata-as-tools.wiki class.$mc.md]
    M destroy
}

test fst-1.0 {} -body {
    ::automata::FST create M {
        tuples {*}{
            {0 a/a 1}
            {1 b/b 0}
        }
        start 0
        final 0
    }
    M generate 4
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{{a b a b} 0 {a b a b}}}

test fst-1.1 {} -body {
    ::automata::FST create M {
        tuples {*}{
            {0 a/a 1}
            {1 b/b 2}
            {2 _/c 0}
        }
        start 0
        final 0
    }
    M generate 6
} -cleanup {
    log::lvSuppressLE i 1
    M destroy
} -result {{{a b a b} 0 {a b c a b c}}}

test fst-1.2 {} -body {
    ::automata::FST create M {
        tuples {*}{
            {0 a/a 1}
            {0 b/d 2}
            {1 b/b 2}
            {2 _/c 0}
        }
        start 0
        final 0 1 2
    }
    M generate 6
} -cleanup {
    log::lvSuppressLE i 1
    M destroy
} -result {{{a b a b} 0 {a b c a b c}} {{a b b a} 1 {a b c d c a}} {{a b b b} 2 {a b c d c d}} {{b a b a} 1 {d c a b c a}} {{b a b b} 2 {d c a b c d}} {{b b a b} 2 {d c d c a b}} {{b b b} 0 {d c d c d c}}}

test fst-2.0 {} -body {
    ::automata::FST create M {
        tuples {*}{
            {0 a/a 1}
            {1 b/b 0}
        }
        start 0
        final 0
    }
    set res {}
    lappend res [M recognize {a b a b} {a b a b}]
    lappend res [M recognize {a b a b} {a b a c}]
    set res
} -cleanup {
    log::lvSuppressLE i 1
    M destroy
} -result {1 0}

test fst-2.1 {} -body {
    ::automata::FST create M {
        tuples {*}{
            {0 a/a 1}
            {1 b/b 2}
            {2 _/c 0}
        }
        start 0
        final 0
    }
    set res {}
    lappend res [M recognize {a b a b} {a b c a b c}]
    lappend res [M recognize {a b a b} {a b a b c}]
    set res
} -cleanup {
    log::lvSuppressLE i 1
    M destroy
} -result {1 0}

test generate-1.0 {} -body {
    ::automata::FST create M {
        tuples {*}{
            {1 a/a 2}
            {2 _/a 1}
        }
        start 1
        final 1
    }
    M generate 4
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{{a a} 1 {a a a a}}}

test generate-1.1 {} -body {
    ::automata::FST create M {
        tuples {*}{
            {1 _/_ 2}
            {1 a/a 3}
            {2 a/b 3}
            {3 _/a 1}
        }
        start 1
        final 1 2 3
    }
    lsort [M generate 4]
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{a 2 {b a}} {{a a} 1 {a a a a}} {{a a} 3 {a a b}} {{a a} 3 {b a a}}}

test recognize-1.0 {recognize relation {a b} -> {x y}} -body {
    ::automata::FST create M {
        tuples {*}{
            {1 a/x 1}
            {1 b/y 2}
            {2 _/_ 1}
        }
        start 1
        final 1
    }
    M recognize {a a} {x x}
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result 1

test recognize-1.1 {recognize relation {a b} -> {x (y y)}} -body {
    ::automata::FST create M {
        tuples {*}{
            {1 a/x 1}
            {1 b/y 2}
            {2 _/y 1}
        }
        start 1
        final 1
    }
    set res {}
    lappend res [M recognize {a b a} {x y y x}]
    lappend res [M recognize {b a a b} {y y x x y}]
    lappend res [M recognize {a b a b} {x y y x y y}]
    set res
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {1 0 1}

test recognize-1.2 {recognize {a*(b+c+)?} relation {a b c} -> {x y z}} -body {
    ::automata::FST create M {
        tuples {*}{
            {1 a/x 1}
            {1 b/y 2}
            {2 b/y 2}
            {2 c/z 3}
            {3 c/z 3}
            {3 _/_ 1}
        }
        start 1
        final 1
    }
    set res {}
    lappend res [M recognize {a b c} {x y z}]
    lappend res [M recognize {a c b} {x z x}]
    lappend res [M recognize {a b b c c a b c} {x y y z z x y z}]
    lappend res [M recognize {a b c} {x x x}]
    set res
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {1 0 1 0}

test dfst-1.0 {} -body {
    ::automata::FST create M {
        tuples {*}{
            {1 a/a 2}
            {2 _/a 1}
        }
        start 1
        final 1
    }
    M generate 4
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{{a a} 1 {a a a a}}}

test dfst-1.1 {} -body {
    ::automata::FST create M {
        tuples {*}{
            {1 a/a 2}
            {2 _/a 1}
        }
        start 1
        final 1
    }
    M recognize {a a} {a a a a}
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result 1

test dfst-1.2 {} -body {
    ::automata::FST create M {
        tuples {*}{
            {1 a/a 2}
            {2 _/a 1}
        }
        start 1
        final 1
    }
    M translate {a a}
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{a a a a}}

test dfst-1.3 {} -body {
    ::automata::FST create M {
        tuples {*}{
            {1 a/a 2}
            {2 _/a 1}
        }
        start 1
        final 1
    }
    M reconstruct {a a a a}
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{a a}}

test dfst-2.0 {The output becomes 1 and remains 1 thereafter when at least two 0's and two 1's have occurred as inputs} -body {
    ::automata::FST create M {
        tuples {*}{
            {A 0/0 D}
            {A 1/0 B}
            {B 0/0 E}
            {B 1/0 C}
            {C 0/0 F}
            {C 1/0 C}
            {D 0/0 G}
            {D 1/0 E}
            {E 0/0 H}
            {E 1/0 F}
            {F 0/0 I}
            {F 1/0 F}
            {G 0/0 G}
            {G 1/0 H}
            {H 0/0 H}
            {H 1/0 I}
            {I 0/1 I}
            {I 1/1 I}
        }
        start A
        final A B C D E F G H I
    }
    set res {}
    lappend res [M translate {1 1}]
    lappend res [M translate {1 1 0 0}]
    lappend res [M translate {1 1 0 0 1 0 1 1}]
    set res
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{{0 0}} {{0 0 0 0}} {{0 0 0 0 1 1 1 1}}}

test dfst-2.1 {edge detector} -body {
    ::automata::FST create M {
        tuples {*}{
            {si 0/0 s0}
            {si 1/0 s1}
            {s0 0/0 s0}
            {s0 1/1 s1}
            {s1 0/1 s0}
            {s1 1/0 s1}
        }
        start si
        final s0 s1
    }
    set res {}
    lappend res [M translate {1 1 0}]
    lappend res [M translate {0 0 1}]
    lappend res [M translate {1 1 0 0 1 0 1 1}]
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{{0 0 1}} {{0 0 1}} {{0 0 1 0 1 1 1 0}}}

test dfst-2.2 {edge detector, same as 2.1} -body {
    ::automata::FST create M {
        tuples {*}{
            {si 0/0 s0}
            {si 1/0 s1}
            {s0 0/0 s0}
            {s0 1/1 s1}
            {s1 0/1 s0}
            {s1 1/0 s1}
        }
        start si
        final s0 s1
    }
    set res {}
    lappend res [M recognize {1 1 0} {0 0 1}]
    lappend res [M translate {1 1 0}]
    lappend res [M reconstruct {0 0 1 0}]
    lappend res [M generate 3]
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {1 {{0 0 1}} {{0 0 1 1} {1 1 0 0}} {{{0 0 0} s0 {0 0 0}} {{0 0 1} s1 {0 0 1}} {{0 1 0} s0 {0 1 1}} {{0 1 1} s1 {0 1 0}} {{1 0 0} s0 {0 1 0}} {{1 0 1} s1 {0 1 1}} {{1 1 0} s0 {0 0 1}} {{1 1 1} s1 {0 0 0}}}}

test dfst-2.4 {edge detector, print} -body {
    ::automata::FST create M {
        tuples {*}{
            {si 0/0 s0}
            {si 1/0 s1}
            {s0 0/0 s0}
            {s0 1/1 s1}
            {s1 0/1 s0}
            {s1 1/0 s1}
        }
        start si
        final s0 s1
    }
    M print
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -output {Input symbols     A = {0, 1}
Output symbols    B = {0, 1}
State symbols     Q = {s0, s1, si}
Start symbols     S = {si}
Final symbols     F = {s0, s1}
Transitions
si × 0 → s0
si × 1 → s1
s0 × 0 → s0
s0 × 1 → s1
s1 × 0 → s0
s1 × 1 → s1
Output
si × 0 → 0
si × 1 → 0
s0 × 0 → 0
s0 × 1 → 1
s1 × 0 → 1
s1 × 1 → 0
Instantaneous description: input, state, output
}

cleanupTests ; return ; # ---------------------------------
