package require tcltest
namespace import ::tcltest::*

::tcltest::configure {*}$argv

::tcltest::testConstraint noskip 1

::tcltest::loadTestedCommands

package require automata::machine

if no {
    set mc PTM
    set m [subst {::automata::$mc create M}]
    {*}$m
    M doc [file join ~ code automata-as-tools.wiki class.$mc.md]
    M destroy
}

test ptm-1.0 {2 state, 2 symbol busy beaver} -body {
    ::automata::PTM create M {
        code {
            A:	JNZ:+4,0
                PRINT
                HEAD:R
                J:B
                PRINT
                HEAD:L
                J:B
            B:	JNZ:+4,0
                PRINT
                HEAD:L
                J:A
                PRINT
                NOP
                J:H
            H:	HALT
        }
    }
    M run {0}
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{1 1 1 1} 1 14}

test ptm-1.1 {2 state, 2 symbol busy beaver, print} -body {
    ::automata::PTM create M {
        code {
            A:	JNZ:+4,0
                PRINT
                HEAD:R
                J:B
                PRINT
                HEAD:L
                J:B
            B:	JNZ:+4,0
                PRINT
                HEAD:L
                J:A
                PRINT
                NOP
                J:H
            H:	HALT
        }
    }
    M print
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -output {Code
A           JNZ   +4    0 
            PRINT        
            HEAD  R      
            J     B      
            PRINT        
            HEAD  L      
            J     B      
B           JNZ   +4    0 
            PRINT        
            HEAD  L      
            J     A      
            PRINT        
            NOP          
            J     H      
H           HALT         
Instantaneous description: tape, head, ipointer
}

test ptm-1.2 {multiply two numbers in unary} -body {
    ::automata::PTM create M {
        code {
            begin:      HEAD:R J1:-1,0 HEAD:R J1:-1,0 HEAD:R PRINT
                        HEAD:L
            a_loop:     HEAD:L J1:-1,0 HEAD:L J1:-1,0 HEAD:R
                        ERASE
                        HEAD:R J0:done,0
                        HEAD:R J1:-1,0 HEAD:R
            b_loop:     HEAD:R
                        J0:a_loop,0
                        ERASE
                        HEAD:R J1:-1,0 HEAD:R J1:-1,0
                        PRINT
                        HEAD:L J1:-1,0 HEAD:L J1:-1,0 PRINT
                        J1:b_loop,0
                        HEAD:R
                        J0:a_loop,0
                        ERASE
            done:       HALT
        }
    }
    M run {0 1 1 1 1 0 1 1 1 1 1 0 0}
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{0 0 0 0 0 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0} 5 35}

if {[package vcompare [package present automata::machine] 0.4] > 0} { 
    cleanupTests ; return 
} 
 

cleanupTests ; return ; # ---------------------------------
