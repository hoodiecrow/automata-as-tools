package require tcltest
namespace import ::tcltest::*

::tcltest::configure {*}$argv

::tcltest::testConstraint noskip 1

::tcltest::loadTestedCommands

package require automata::machine

if no {
    set mc PTM
    set m [subst {::automata::$mc create M}]
    {*}$m
    M doc [file join ~ code automata-as-tools.wiki class.$mc.md]
    M destroy
}

test ptm-1.0 {2 state, 2 symbol busy beaver} -body {
    ::automata::PTM create M {
        code {
            A:	J1:+3,0
                OUT:head,P,R
                JMP:B
                OUT:head,P,L
                JMP:B
            B:	J1:+3,0
                OUT:head,P,L
                JMP:A
                OUT:head,P
                NOP
                JMP:H
            H:	HALT
        }
    }
    M run {0}
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{1 1 1 1} 1 11}

test ptm-1.1 {2 state, 2 symbol busy beaver, print} -body {
    ::automata::PTM create M {
        code {
            A:	J1:+3,0
                OUT:head,P,R
                JMP:B
                OUT:head,P,L
                JMP:B
            B:	J1:+3,0
                OUT:head,P,L
                JMP:A
                OUT:head,P
                NOP
                JMP:H
            H:	HALT
        }
    }
    M print
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -output {Code
A     J1    +3    0 
      OUT   head  P R
      JMP   B      
      OUT   head  P L
      JMP   B      
B     J1    +3    0 
      OUT   head  P L
      JMP   A      
      OUT   head  P 
      NOP          
      JMP   H      
H     HALT         
Instantaneous description: tape, head, ipointer
}

test ptm-1.2 {multiply two numbers in unary} -body {
    ::automata::PTM create M {
        code {
            begin:      OUT:head,N,R J1:-1,0 OUT:head,N,R J1:-1,0 OUT:head,N,R OUT:head,P,L
            a_loop:     OUT:head,N,L J1:-1,0 OUT:head,N,L J1:-1,0 OUT:head,N,R OUT:head,E,R
                        J0:done,0
                        OUT:head,N,R J1:-1,0 OUT:head,N,R
            b_loop:     OUT:head,N,R
                        J0:a_loop,0
                        OUT:head,E
                        OUT:head,N,R J1:-1,0 OUT:head,N,R J1:-1,0
                        OUT:head,P
                        OUT:head,N,L J1:-1,0 OUT:head,N,L J1:-1,0 OUT:head,P
                        J1:b_loop,0
                        OUT:head,N,R
                        J0:a_loop,0
                        OUT:head,E
            done:       HALT
        }
    }
    M run {0 1 1 1 1 0 1 1 1 1 1 0 0}
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {{0 0 0 0 0 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0} 5 33}

if {[package vcompare [package present automata::machine] 0.4] > 0} { 
    cleanupTests ; return 
} 
 

cleanupTests ; return ; # ---------------------------------
