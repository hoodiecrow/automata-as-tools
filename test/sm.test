package require tcltest
namespace import ::tcltest::*

::tcltest::configure {*}$argv

::tcltest::loadTestedCommands

package require automata::sm

test sm-1.0 {Calculate 4 x (2 + 3)} -setup {
    ::automata::SM create M
} -body {
    M compile {
        2 3 + 4 *
    }
    M run {}
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {20 5}

test sm-1.1 {print 1.0} -setup {
    ::automata::SM create M
} -body {
    M compile {
        2 3 + 4 *
    }
    M print
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -output {Flag symbols    A = {0, 1}
Stack values    B = {0, 2, 3, 4}
Instructions    Q = {0, 1, 2, 3, 4, 5, 6}
Program start   S = 0
Program end     F = {5}
Operator list   O = {*, +, ==, ADD, CLR, DEC, EQ, eq, EQL, INC, MUL, NOP, PUSH}
Transitions
q0    inp   q1    out
0     0     1     PUSH 2
0     1     1     PUSH 2
1     0     2     PUSH 3
1     1     2     PUSH 3
2     0     3     + 0
2     1     3     + 0
3     0     4     PUSH 4
3     1     4     PUSH 4
4     0     5     * 0
4     1     5     * 0
5     0     6     NOP 0
5     1     6     NOP 0
}

test sm-2.0 {Implement a CLR operation} -setup {
    ::automata::SM create M
} -body {
    M compile {
            3
    a:      JZ:end
            DEC
            J:a
    end:    NOP
    }
    M run {}
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -result {0 5}

test sm-2.1 {Print 2.0} -setup {
    ::automata::SM create M
} -body {
    M compile {
            3
    a:      JZ:end
            DEC
            J:a
    end:    NOP
    }
    M print
} -cleanup {
    M destroy
    log::lvSuppressLE i 1
} -output {Flag symbols    A = {0, 1}
Stack values    B = {0, 3}
Instructions    Q = {0, 1, 2, 3, 4, 5, 6}
Program start   S = 0
Program end     F = {5}
Operator list   O = {*, +, ==, ADD, CLR, DEC, EQ, eq, EQL, INC, MUL, NOP, PUSH}
Transitions
q0    inp   q1    out
0     0     1     PUSH 3
0     1     1     PUSH 3
1     0     4     NOP 0
1     1     2     NOP 0
2     0     3     DEC 0
2     1     3     DEC 0
3     0     1     NOP 0
3     1     1     NOP 0
4     0     5     NOP 0
4     1     5     NOP 0
5     0     6     NOP 0
5     1     6     NOP 0
}

cleanupTests ; return ; # ---------------------------------
